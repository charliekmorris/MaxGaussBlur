
package gaussblur;

import static com.maxeler.maxcompiler.v2.managers.standard.Manager.link;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.standard.IOLink.IODestination;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;

public class GaussBlurManager {

	private static final String s_kernelName = "GaussBlurKernel";

	public static void main(String[] args) {
		GaussBlurEngineParameters params = new GaussBlurEngineParameters(args);
		Manager manager = new Manager(params);
		Kernel kernel   = new GaussBlurKernel(manager.makeKernelParameters(s_kernelName));
		manager.setKernel(kernel);
		manager.setIO(IOType.ALL_CPU);

		manager.addInterface(modeDefault());
		
		configBuild(manager, params);
		
		manager.build();
	}

	private static EngineInterface interfaceDefault() {
				EngineInterface m = new EngineInterface();
		InterfaceParam size = m.addParam("size", CPUTypes.INT32);
		m.setTicks("SobelKernel", size);
		m.setStream("inImage", CPUTypes.INT32, size * CPUTypes.INT32.sizeInBytes());
		m.setStream("outImage", CPUTypes.INT32, size * CPUTypes.INT32.sizeInBytes());
		return m;
	}
	
	private static void configBuild(Manager manager, GaussBlurEngineParameters params) {
		manager.setEnableStreamStatusBlocks(false);
		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}
}

